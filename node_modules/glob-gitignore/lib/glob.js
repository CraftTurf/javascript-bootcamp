'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.glob = glob;

var _glob = require('glob');

var _util = require('util.inherits');

var _util2 = _interopRequireDefault(_util);

var _util3 = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Subclass of `glob.GlobSync`
// @param {string}     pattern      Pattern to be matched.
// @param {Object}     options      `options` for `glob`
// @param {function()} shouldIgnore Method to check whether a directory should be ignored.
// @constructor
function _Glob(pattern, options, callback, shouldIgnore) {

  // We don't put this thing to argument `options` to avoid
  // further problems, such as `options` validation.

  // Use `Symbol` as much as possible to avoid confliction.
  this[_util3.IGNORE] = shouldIgnore;
  _glob.Glob.call(this, pattern, options, callback);
}

(0, _util2.default)(_Glob, _glob.Glob);

_Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  var marked = this._mark(abs);

  if (this[_util3.IGNORE] && this[_util3.IGNORE](marked)) {
    return cb();
  }

  return _glob.Glob.prototype._readdir.call(this, abs, inGlobStar, cb);
};

function globOne(pattern, opts, ignore) {
  return new _promise2.default(function (resolve, reject) {
    new _Glob(pattern, opts, function (err, files) {
      if (err) {
        return reject(err);
      }

      resolve(files);
    }, ignore);
  });
}

function glob(_patterns) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (options.sync) {
    return sync(_patterns, options);
  }

  var _createTasks = (0, _util3.createTasks)(_patterns, options),
      patterns = _createTasks.patterns,
      ignore = _createTasks.ignore,
      join = _createTasks.join,
      opts = _createTasks.opts,
      result = _createTasks.result;

  if (result) {
    return _promise2.default.resolve(result);
  }

  return _promise2.default.all(patterns.map(function (pattern) {
    return globOne(pattern, opts, ignore);
  })).then(join);
}