'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTasks = exports.IGNORE = undefined;

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _ignore = require('ignore');

var _ignore2 = _interopRequireDefault(_ignore);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash.difference');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.union');

var _lodash4 = _interopRequireDefault(_lodash3);

var _makeArray = require('make-array');

var _makeArray2 = _interopRequireDefault(_makeArray);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IGNORE = exports.IGNORE = typeof _symbol2.default === 'function' ? (0, _symbol2.default)('ignore') : '_shouldIgnore';

function relative(abs, cwd) {
  return _path2.default.relative(cwd, abs);
}

var createShouldIgnore = function createShouldIgnore(options) {
  var opts = (0, _assign2.default)({
    cache: (0, _create2.default)(null),
    statCache: (0, _create2.default)(null),
    realpathCache: (0, _create2.default)(null),
    symlinks: (0, _create2.default)(null)
  }, options);

  var ignores = opts.ignore,
      _opts$cwd = opts.cwd,
      cwd = _opts$cwd === undefined ? process.cwd() : _opts$cwd;


  delete opts.ignore;

  if (!ignores) {
    return {
      ignore: function ignore() {
        return false;
      },
      filter: function filter() {
        return true;
      },
      opts: opts
    };
  }

  if (typeof ignores === 'function') {
    return ignores;
  }

  var ig = (0, _ignore2.default)().add(ignores);
  var filter = ig.createFilter();

  return {
    ignore: function ignore(filepath) {
      filepath = relative(filepath, cwd);
      if (!filepath) {
        return false;
      }

      return !filter(filepath);
    },

    filter: filter,
    opts: opts
  };
};

var isNegative = function isNegative(pattern) {
  return pattern[0] === '!';
};
var isString = function isString(subject) {
  return typeof subject === 'string';
};

var createTasks = exports.createTasks = function createTasks(patterns, options) {
  patterns = (0, _makeArray2.default)(patterns);

  if (!patterns.length || !patterns.every(isString)) {
    throw new TypeError('patterns must be a string or an array of strings');
  }

  var negativeFlags = [];
  var positivesCount = 0;
  patterns = patterns.map(function (pattern, i) {
    if (isNegative(pattern)) {
      negativeFlags[i] = true;
      return pattern.slice(1);
    }

    positivesCount++;
    return pattern;
  });

  // or only provide a negative pattern
  if (positivesCount === 0) {
    return {
      result: []
    };
  }

  var _createShouldIgnore = createShouldIgnore(options),
      opts = _createShouldIgnore.opts,
      filter = _createShouldIgnore.filter,
      ignore = _createShouldIgnore.ignore;

  // Only one positive pattern


  if (positivesCount === 1) {
    return {
      join: function join(_ref) {
        var _ref2 = (0, _slicedToArray3.default)(_ref, 1),
            files = _ref2[0];

        // _GlobSync only filters _readdir, so glob results should be filtered again.
        return files.filter(filter);
      },


      patterns: patterns,
      opts: opts,
      ignore: ignore
    };
  }

  return {
    join: function join(fileGroups) {
      var positives = [];
      var negatives = [];

      fileGroups.forEach(function (files, i) {
        negativeFlags[i] ? negatives.push(files) : positives.push(files);
      });

      return _lodash2.default.apply(undefined, [_lodash4.default.apply(undefined, positives)].concat(negatives)).filter(filter);
    },


    patterns: patterns,
    opts: opts,
    ignore: ignore
  };
};